[{"C:\\jp\\Projects\\mathgame\\src\\index.js":"1","C:\\jp\\Projects\\mathgame\\src\\App.js":"2","C:\\jp\\Projects\\mathgame\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":1929,"mtime":1612218231008,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ynnzyd",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\jp\\Projects\\mathgame\\src\\index.js",[],"C:\\jp\\Projects\\mathgame\\src\\App.js",["15"],"import './App.css';\n\n  // Color Theme\n  const colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n  };\n\nconst App = () => {\n  const stars = 5;\n\n    return (\n      <div className=\"game\">\n        <div className=\"help\">\n          Pick 1 or more numbers that sum to the number of stars\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n           {utils.range(1, stars).map(starId => \n              <div key={starId} className=\"star\" />\n            )}\n          </div>\n          <div className=\"right\">\n            {utils.range(1, 9).map(numberId => \n            <button key={numberId} className=\"number\" type=\"button\">{numberId}</button>\n            )}\n          </div>\n        </div>\n        <div className=\"timer\">Time Remaining: 10</div>\n      </div>\n    );\n  };\n  \n\n  \n  // Math science\n  const utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n  \n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n      const sets = [[]];\n      const sums = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\n\nexport default App;\n","C:\\jp\\Projects\\mathgame\\src\\reportWebVitals.js",[],{"ruleId":"16","severity":1,"message":"17","line":4,"column":9,"nodeType":"18","messageId":"19","endLine":4,"endColumn":15},"no-unused-vars","'colors' is assigned a value but never used.","Identifier","unusedVar"]